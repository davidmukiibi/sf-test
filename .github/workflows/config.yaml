name: scaling funds CI/CD example
on:
  push:
    branches:
      - main
env:
  PROJECT_ID: ${{ secrets.GKE_PROJECT }}
  GKE_CLUSTER: ${{ secrets.GKE_CLUSTER }}
  GKE_ZONE: ${{ secrets.GKE_ZONE }}
  DEPLOYMENT_NAME: ${{ secrets.DEPLOYMENT_NAME }}
  IMAGE: ${{ secrets.IMAGE }}

jobs:
  test:
    name: Test job
    runs-on: ubuntu-18.04
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Run tests here
        run: |
          echo "running tests here"

  build-test-docker-image:
    name: Build docker image
    needs: [test]
    runs-on: ubuntu-18.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Build an image from Dockerfile
        run: |
          docker build -t gcr.io/${{ secrets.PROJECT_ID }}/scaling-funds-api:${{ github.sha }} .
          # docker build \
          # --tag "gcr.io/$PROJECT_ID/$IMAGE:$GITHUB_SHA" \
          # --build-arg GITHUB_SHA="$GITHUB_SHA" \
          # --build-arg GITHUB_REF="$GITHUB_REF" \
          # .

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'gcr.io/${{ secrets.PROJECT_ID }}/scaling-funds-api:${{ github.sha }}'
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'

      # Push the Docker image to Google Container Registry
      - name: Publish
        run: |-
          docker push "gcr.io/${{ secrets.PROJECT_ID }}/scaling-funds-api:${{ github.sha }}"

  deploy-infrastructure:
    name: Deployment job
    needs: [test, build-test-docker-image]
    runs-on: ubuntu-18.04
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.0.10

      - name: Terraform Format
        id: fmt
        run: terraform fmt -check

      - name: Initialize terraform
        run: terraform init

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - id: plan
        run: terraform plan -no-color

      - id: apply
        run: terraform apply -auto-approve

  deploy-k8s-deployment:
    name: update k8s deployment
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    # Setup gcloud CLI
    - uses: google-github-actions/setup-gcloud@94337306dda8180d967a56932ceb4ddcf01edae7
      with:
        service_account_key: ${{ secrets.GKE_SA_KEY }}
        project_id: ${{ secrets.GKE_PROJECT }}

    # Configure Docker to use the gcloud command-line tool as a credential
    # helper for authentication
    - name: configure docker
      run: |-
        gcloud --quiet auth configure-docker

    # Get the GKE credentials so we can deploy to the cluster
    - uses: google-github-actions/get-gke-credentials@fb08709ba27618c31c09e014e1d8364b02e5042e
      with:
        cluster_name: ${{ env.GKE_CLUSTER }}
        location: ${{ env.GKE_ZONE }}
        credentials: ${{ secrets.GKE_SA_KEY }}

    # Set up kustomize
    - name: Set up Kustomize
      run: |-
        curl -sfLo kustomize https://github.com/kubernetes-sigs/kustomize/releases/download/v3.1.0/kustomize_3.1.0_linux_amd64
        chmod u+x ./kustomize

    # Deploy the Docker image to the GKE cluster
    - name: Deploy
      run: |-
        ./kustomize edit set image gcr.io/${{ secrets.PROJECT_ID }}/scaling-funds-api:v1=gcr.io/$PROJECT_ID/scaling-funds-api:$GITHUB_SHA
        ./kustomize build ./k8s-configs/ | kubectl apply -f -
        kubectl rollout status deployment/$DEPLOYMENT_NAME
        kubectl get services -o wide
